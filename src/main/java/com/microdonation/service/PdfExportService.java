package com.microdonation.service;

import com.microdonation.dto.CampaignReportDTO;
import com.microdonation.dto.DonationDTO;
import com.microdonation.dto.UserReportDTO;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import com.itextpdf.kernel.colors.ColorConstants;
import com.itextpdf.kernel.pdf.PdfDocument;
import com.itextpdf.kernel.pdf.PdfWriter;
import com.itextpdf.layout.Document;
import com.itextpdf.layout.element.Cell;
import com.itextpdf.layout.element.Paragraph;
import com.itextpdf.layout.element.Table;
import com.itextpdf.layout.properties.TextAlignment;
import com.itextpdf.layout.properties.UnitValue;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.text.DecimalFormat;
import java.time.format.DateTimeFormatter;

@Service
@RequiredArgsConstructor
public class PdfExportService {

    private static final DateTimeFormatter DATE_FORMATTER = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
    private static final DecimalFormat DECIMAL_FORMAT = new DecimalFormat("#,##0.00");

    /**
     * Generate Campaign Report PDF
     */
    public byte[] generateCampaignReportPdf(CampaignReportDTO report) throws IOException {
        ByteArrayOutputStream out = new ByteArrayOutputStream();

        try (PdfWriter writer = new PdfWriter(out);
             PdfDocument pdfDoc = new PdfDocument(writer);
             Document document = new Document(pdfDoc)) {

            // Set document metadata
            pdfDoc.getDocumentInfo().setTitle("Campaign Fundraising Report");
            pdfDoc.getDocumentInfo().setAuthor("Micro-Donation Platform");
            pdfDoc.getDocumentInfo().setSubject("Campaign Report - " + report.getTitle());

            // Add title
            Paragraph title = new Paragraph("CAMPAIGN FUNDRAISING REPORT")
                    .setFontSize(20)
                    .setBold()
                    .setTextAlignment(TextAlignment.CENTER)
                    .setMarginBottom(20);
            document.add(title);

            // Add campaign summary
            addCampaignSummarySection(document, report);

            // Add recent donations section
            if (report.getRecentDonations() != null && !report.getRecentDonations().isEmpty()) {
                document.add(new Paragraph("\nRECENT DONATIONS")
                        .setFontSize(14)
                        .setBold()
                        .setMarginTop(20));
                addDonationsTable(document, report.getRecentDonations());
            }

            // Add top donations section
            if (report.getTopDonations() != null && !report.getTopDonations().isEmpty()) {
                document.add(new Paragraph("\nTOP DONATIONS")
                        .setFontSize(14)
                        .setBold()
                        .setMarginTop(20));
                addDonationsTable(document, report.getTopDonations());
            }

            // Add footer
            document.add(new Paragraph("\n\nGenerated by Micro-Donation Platform")
                    .setFontSize(8)
                    .setTextAlignment(TextAlignment.CENTER)
                    .setFontColor(ColorConstants.GRAY));
        }

        return out.toByteArray();
    }

    /**
     * Generate User Report PDF
     */
    public byte[] generateUserReportPdf(UserReportDTO report) throws IOException {
        ByteArrayOutputStream out = new ByteArrayOutputStream();

        try (PdfWriter writer = new PdfWriter(out);
             PdfDocument pdfDoc = new PdfDocument(writer);
             Document document = new Document(pdfDoc)) {

            // Set document metadata
            pdfDoc.getDocumentInfo().setTitle("User Donation Report");
            pdfDoc.getDocumentInfo().setAuthor("Micro-Donation Platform");
            pdfDoc.getDocumentInfo().setSubject("Donation History - " + report.getName());

            // Add title
            Paragraph title = new Paragraph("USER DONATION REPORT")
                    .setFontSize(20)
                    .setBold()
                    .setTextAlignment(TextAlignment.CENTER)
                    .setMarginBottom(20);
            document.add(title);

            // Add user summary
            addUserSummarySection(document, report);

            // Add donation history
            if (report.getDonationHistory() != null && !report.getDonationHistory().isEmpty()) {
                document.add(new Paragraph("\nDONATION HISTORY")
                        .setFontSize(14)
                        .setBold()
                        .setMarginTop(20));
                addDonationsTable(document, report.getDonationHistory());
            }

            // Add footer
            document.add(new Paragraph("\n\nGenerated by Micro-Donation Platform")
                    .setFontSize(8)
                    .setTextAlignment(TextAlignment.CENTER)
                    .setFontColor(ColorConstants.GRAY));
        }

        return out.toByteArray();
    }

    /**
     * Add Campaign Summary Section
     */
    private void addCampaignSummarySection(Document document, CampaignReportDTO report) {
        // Create summary table
        Table summaryTable = new Table(UnitValue.createPercentArray(new float[]{30, 70}))
                .useAllAvailableWidth()
                .setMarginBottom(10);

        addSummaryRow(summaryTable, "Campaign ID:", report.getCampaignId().toString());
        addSummaryRow(summaryTable, "Title:", report.getTitle());
        addSummaryRow(summaryTable, "Description:", report.getDescription());
        addSummaryRow(summaryTable, "Goal Amount:", "₹ " + DECIMAL_FORMAT.format(report.getGoalAmount()));
        addSummaryRow(summaryTable, "Raised Amount:", "₹ " + DECIMAL_FORMAT.format(report.getRaisedAmount()));
        addSummaryRow(summaryTable, "Progress:", String.format("%.2f%%", report.getProgressPercentage()));
        addSummaryRow(summaryTable, "Total Donors:", report.getTotalDonors().toString());
        addSummaryRow(summaryTable, "Status:", report.getStatus());
        addSummaryRow(summaryTable, "Start Date:", report.getStartDate());
        addSummaryRow(summaryTable, "End Date:", report.getEndDate());

        document.add(summaryTable);
    }

    /**
     * Add User Summary Section
     */
    private void addUserSummarySection(Document document, UserReportDTO report) {
        // Create summary table
        Table summaryTable = new Table(UnitValue.createPercentArray(new float[]{30, 70}))
                .useAllAvailableWidth()
                .setMarginBottom(10);

        addSummaryRow(summaryTable, "User ID:", report.getUserId().toString());
        addSummaryRow(summaryTable, "Name:", report.getName());
        addSummaryRow(summaryTable, "Email:", report.getEmail());
        addSummaryRow(summaryTable, "Total Donated:", "₹ " + DECIMAL_FORMAT.format(report.getTotalDonated()));
        addSummaryRow(summaryTable, "Total Donations:", report.getTotalDonations().toString());

        document.add(summaryTable);
    }

    /**
     * Add Donations Table
     */
    private void addDonationsTable(Document document, java.util.List<DonationDTO> donations) {
        // Create table with 6 columns
        Table table = new Table(UnitValue.createPercentArray(new float[]{10, 20, 25, 15, 20, 10}))
                .useAllAvailableWidth()
                .setMarginTop(10);

        // Add header cells
        addHeaderCell(table, "ID");
        addHeaderCell(table, "User");
        addHeaderCell(table, "Campaign");
        addHeaderCell(table, "Amount (₹)");
        addHeaderCell(table, "Date");
        addHeaderCell(table, "Status");

        // Add data rows
        for (DonationDTO donation : donations) {
            table.addCell(new Cell().add(new Paragraph(donation.getDonationId().toString()).setFontSize(9)));
            table.addCell(new Cell().add(new Paragraph(donation.getUserName()).setFontSize(9)));
            table.addCell(new Cell().add(new Paragraph(donation.getCampaignTitle()).setFontSize(9)));
            table.addCell(new Cell().add(new Paragraph(DECIMAL_FORMAT.format(donation.getAmount())).setFontSize(9)));
            table.addCell(new Cell().add(new Paragraph(donation.getDonationDate().format(DATE_FORMATTER)).setFontSize(9)));
            table.addCell(new Cell().add(new Paragraph(donation.getPaymentStatus()).setFontSize(9)));
        }

        document.add(table);
    }

    /**
     * Add summary row to table
     */
    private void addSummaryRow(Table table, String label, String value) {
        Cell labelCell = new Cell()
                .add(new Paragraph(label).setBold().setFontSize(10))
                .setBackgroundColor(ColorConstants.LIGHT_GRAY);
        Cell valueCell = new Cell()
                .add(new Paragraph(value).setFontSize(10));

        table.addCell(labelCell);
        table.addCell(valueCell);
    }

    /**
     * Add header cell to table
     */
    private void addHeaderCell(Table table, String text) {
        Cell cell = new Cell()
                .add(new Paragraph(text).setBold().setFontSize(10))
                .setBackgroundColor(ColorConstants.LIGHT_GRAY)
                .setTextAlignment(TextAlignment.CENTER);
        table.addHeaderCell(cell);
    }
}
